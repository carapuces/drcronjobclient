/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/carapuces/drcronjobclient/pkg/apis/drcronjob/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DRCronJobLister helps list DRCronJobs.
// All objects returned here must be treated as read-only.
type DRCronJobLister interface {
	// List lists all DRCronJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DRCronJob, err error)
	// DRCronJobs returns an object that can list and get DRCronJobs.
	DRCronJobs(namespace string) DRCronJobNamespaceLister
	DRCronJobListerExpansion
}

// dRCronJobLister implements the DRCronJobLister interface.
type dRCronJobLister struct {
	indexer cache.Indexer
}

// NewDRCronJobLister returns a new DRCronJobLister.
func NewDRCronJobLister(indexer cache.Indexer) DRCronJobLister {
	return &dRCronJobLister{indexer: indexer}
}

// List lists all DRCronJobs in the indexer.
func (s *dRCronJobLister) List(selector labels.Selector) (ret []*v1.DRCronJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DRCronJob))
	})
	return ret, err
}

// DRCronJobs returns an object that can list and get DRCronJobs.
func (s *dRCronJobLister) DRCronJobs(namespace string) DRCronJobNamespaceLister {
	return dRCronJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DRCronJobNamespaceLister helps list and get DRCronJobs.
// All objects returned here must be treated as read-only.
type DRCronJobNamespaceLister interface {
	// List lists all DRCronJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DRCronJob, err error)
	// Get retrieves the DRCronJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DRCronJob, error)
	DRCronJobNamespaceListerExpansion
}

// dRCronJobNamespaceLister implements the DRCronJobNamespaceLister
// interface.
type dRCronJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DRCronJobs in the indexer for a given namespace.
func (s dRCronJobNamespaceLister) List(selector labels.Selector) (ret []*v1.DRCronJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DRCronJob))
	})
	return ret, err
}

// Get retrieves the DRCronJob from the indexer for a given namespace and name.
func (s dRCronJobNamespaceLister) Get(name string) (*v1.DRCronJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("drcronjob"), name)
	}
	return obj.(*v1.DRCronJob), nil
}
